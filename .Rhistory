library(DMwR)
df <- read.csv("C:\\Users\\riddh\\OneDrive\\Documents\\Projects\\Pushkar-Project\\Regression_Project\\Regression_Project\\Balance_OpenEnded.csv",sep = ",", header = T, na.strings = c("-")) #importing csv and replacing missing values with NA
#factor to numeric using nested conversion (for regression)
for (i in 2:11){
if(class(df[,i]) != "numeric")
{
df[,i] <- as.numeric(as.character(df[,i]))
}
}
#missing value analysis
ds_missingVal = data.frame(apply(df,2,function(x){sum(is.na(x))}))
ds_missingVal$Columns = row.names(ds_missingVal)
names(ds_missingVal)[1] =  "Missing_percentage"
ds_missingVal$Missing_percentage = (ds_missingVal$Missing_percentage/nrow(df)) * 100
ds_missingVal = ds_missingVal[order(-ds_missingVal$Missing_percentage),]
row.names(ds_missingVal) = NULL
ds_missingVal = ds_missingVal[,c(2,1)]
write.csv(ds_missingVal, "Missing_perc.csv", row.names = F)
#imputation using KNN since missing value is less than 35%
df_vis <- df[,2:11]
df_vis = knnImputation(df_vis, k = 3)
df <- read.csv("C:\\Users\\riddh\\OneDrive\\Documents\\Projects\\Pushkar-Project\\Regression_Project\\Regression_Project\\open-ended.csv",sep = ",", header = T, na.strings = c("-")) #importing csv and replacing missing values with NA
df <- read.csv("C:\\Users\\riddh\\OneDrive\\Documents\\Projects\\Pushkar-Project\\Regression_Project\\open-ended.csv",sep = ",", header = T, na.strings = c("-")) #importing csv and replacing missing values with NA
df <- read.csv("C:\Users\riddh\OneDrive\Documents\Projects\Pushkar-Project\\open-ended.csv",sep = ",", header = T, na.strings = c("-")) #importing csv and replacing missing values with NA
df <- read.csv("C:\Users\riddh\OneDrive\Documents\Projects\Pushkar-Project\\open-ended.csv",sep = ",", header = T, na.strings = c("-")) #importing csv and replacing missing values with NA
df <- read.csv("C:\\Users\\riddh\\OneDrive\\Documents\\Projects\\Pushkar-Project\\open-ended.csv",sep = ",", header = T, na.strings = c("-")) #importing csv and replacing missing values with NA
for (i in 2:11){
if(class(df[,i]) != "numeric")
{
df[,i] <- as.numeric(as.character(df[,i]))
}
}
ds_missingVal = data.frame(apply(df,2,function(x){sum(is.na(x))}))
ds_missingVal$Columns = row.names(ds_missingVal)
names(ds_missingVal)[1] =  "Missing_percentage"
ds_missingVal$Missing_percentage = (ds_missingVal$Missing_percentage/nrow(df)) * 100
ds_missingVal = ds_missingVal[order(-ds_missingVal$Missing_percentage),]
row.names(ds_missingVal) = NULL
ds_missingVal = ds_missingVal[,c(2,1)]
write.csv(ds_missingVal, "Missing_perc.csv", row.names = F)
View(ds_missingVal)
#imputation using KNN since missing value is less than 35%
df_vis <- df[,2:11]
df_vis = knnImputation(df_vis, k = 3)
library(psych)
library(ggplot2)
drawBoxP <- function(df){
for (i in 1:ncol(df)){
title_val <- paste("Boxplot with Outliers of ",colnames(df[i])) # paste("Boxplot without Outliers of ",colnames(df[i]))
box_plot <- ggplot(df, aes(x='', y= df[,i])) +
geom_boxplot(outlier.color = "red", outlier.shape = 19,
outlier.size = 1.5, outlier.stroke = 0.5) +
labs(title=title_val,x=colnames(df[i]), y = "Frequency") +
geom_jitter(shape=16, position=position_jitter(0.2)) #with jitter
print(box_plot)
}
}
#boxplot with outliers
drawBoxP(df_vis)
library(DMwR)
df <- read.csv("C:\\Users\\riddh\\OneDrive\\Documents\\Projects\\Pushkar-Project\\Equity_OpenEnded.csv",sep = ",", header = T, na.strings = c("-")) #importing csv and replacing missing values with NA
#factor to numeric using nested conversion (for regression)
for (i in 2:11){
if(class(df[,i]) != "numeric")
{
df[,i] <- as.numeric(as.character(df[,i]))
}
}
#missing value analysis
ds_missingVal = data.frame(apply(df,2,function(x){sum(is.na(x))}))
ds_missingVal$Columns = row.names(ds_missingVal)
names(ds_missingVal)[1] =  "Missing_percentage"
ds_missingVal$Missing_percentage = (ds_missingVal$Missing_percentage/nrow(df)) * 100
ds_missingVal = ds_missingVal[order(-ds_missingVal$Missing_percentage),]
row.names(ds_missingVal) = NULL
ds_missingVal = ds_missingVal[,c(2,1)]
write.csv(ds_missingVal, "Missing_perc.csv", row.names = F)
#imputation using KNN since missing value is less than 35%
df_vis <- df[,2:11]
df_vis = knnImputation(df_vis, k = 3)
View(ds_missingVal)
library(mlbench)
library(caret)
library(gridExtra)
df_train <- df_vis
colnames(df_train)[10] <- 'target_flows'
#correlation analysis
corrMat <- cor(df_train)
#printing out png of correlation matrix
png("C:\\Users\\riddh\\OneDrive\\Documents\\Projects\\Pushkar-Project\\Regression_Project\\Regression_Project\\correlationMatrix.png")
grid.table(corrMat)
dev.off()
#create regression model
mlrmodel <- lm(target_flows ~., data = df_train)
summary(mlrmodel)
#calculate accuracy of model
trainIndex = createDataPartition(df_train$target_flows, p = .80, list = FALSE)
dfObserved <- df_train[-trainIndex,]
predictionsMLR_DT = predict(mlrmodel, dfObserved[,1:9]) # or dsTest[,-10]
#accuracy using Mean Absolute Percentage Error
MAPE = function(y, yhat){
mean(abs((y - yhat)/y))
}
AccuracyMLR = 100 - MAPE(dfObserved[,10], predictionsMLR_DT)
print(paste("Accuracy of Multiple Linear Regression is",AccuracyMLR))
library(mlbench)
library(caret)
library(gridExtra)
df_train <- df_vis
colnames(df_train)[10] <- 'target_flows'
#correlation analysis
'''corrMat <- cor(df_train)
#printing out png of correlation matrix
png("C:\\Users\\riddh\\OneDrive\\Documents\\Projects\\Pushkar-Project\\Regression_Project\\Regression_Project\\correlationMatrix.png")
grid.table(corrMat)
dev.off()'''
#create regression model
mlrmodel <- lm(target_flows ~., data = df_train)
summary(mlrmodel)
#calculate accuracy of model
trainIndex = createDataPartition(df_train$target_flows, p = .80, list = FALSE)
dfObserved <- df_train[-trainIndex,]
predictionsMLR_DT = predict(mlrmodel, dfObserved[,1:9]) # or dsTest[,-10]
#accuracy using Mean Absolute Percentage Error
MAPE = function(y, yhat){
mean(abs((y - yhat)/y))
}
AccuracyMLR = 100 - MAPE(dfObserved[,10], predictionsMLR_DT)
print(paste("Accuracy of Multiple Linear Regression is",AccuracyMLR))
MAPE(dfObserved[,10], predictionsMLR_DT)
dfObserved[,10]
predictionsMLR_DT
library(mlbench)
library(caret)
library(gridExtra)
df_train <- df_vis
colnames(df_train)[10] <- 'target_flows'
#correlation analysis
'''corrMat <- cor(df_train)
#printing out png of correlation matrix
png("C:\\Users\\riddh\\OneDrive\\Documents\\Projects\\Pushkar-Project\\Regression_Project\\Regression_Project\\correlationMatrix.png")
grid.table(corrMat)
dev.off()'''
#create regression model
mlrmodel <- lm(target_flows ~., data = df_train)
summary(mlrmodel)
#calculate accuracy of model
trainIndex = createDataPartition(df_train$target_flows, p = .80, list = FALSE)
dfObserved <- df_train[-trainIndex,]
predictionsMLR_DT = predict(mlrmodel, dfObserved[,1:9]) # or dsTest[,-10]
#accuracy using Mean Absolute Percentage Error
MAPE = function(y, yhat){
mean(abs((y - yhat)/yhat))
}
AccuracyMLR = 100 - MAPE(dfObserved[,10], predictionsMLR_DT)
print(paste("Accuracy of Multiple Linear Regression is",AccuracyMLR))
